name: Create a tag and notify
on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      tag-prefix:
        required: true
        type: string
      deploy-status:
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    run: echo "STATUS =>  $(git rev-parse "${inputs.deploy-statu}")"
  fail:
    runs-on: ubuntu-latest
    if: always() && ${{ inputs.deploy-status }} == 'failure'
    steps:
      - name: Notify in Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text":"",
              "blocks":[
                {
                  "type":"section",
                  "text":{
                    "type":"mrkdwn",
                    "text":"‚ùå *Production deployment of _PLOP_ has failed* ‚ùå"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  create_tag:
    runs-on: ubuntu-latest
    if: always() && ${{ inputs.deploy-status }} == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        run: |
          git tag "${{ inputs.tag-prefix }}_$(TZ=America/Montreal date +'%Y%m%dT%H%M')"
          git push --tags        

  send_message:
    needs: create_tag
    runs-on: ubuntu-latest
    steps:
      - name: Notify in Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text":"",
              "blocks":[
                {
                  "type":"section",
                  "text":{
                    "type":"mrkdwn",
                    "text":"*Production deployment of _${{ inputs.app-name }}_ is completed* ‚úÖ"
                  }
                },
                {
                  "type":"section",
                  "text":{
                    "type":"mrkdwn",
                    "text":"üöÄ  Deployed by ${{ github.actor }}  üöÄ"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
